from tokens import bot, chat_shop, chat_id
from telebot import types
import time
import json
import datetime
import sconsole


def send_inst(message):
    inline_keyboard = types.InlineKeyboardMarkup()
    inline_keyboard.row(
        types.InlineKeyboardButton(text='–ø–æ–Ω', callback_data='page2'),
    )
    with open('roli.json', 'r', encoding="utf-8") as file:
        data = json.load(file)
        instructions = data['inst']
        instructions2 = data['inst2']

    message_text = f"–ì–ª–∞–≤–∞ 1\n{instructions}"
    mess = f'–ì–ª–∞–≤–∞ 2\n{instructions2}'
    bot.send_message(message.chat.id, message_text, reply_markup=inline_keyboard)
    bot.send_message(message.chat.id, mess, reply_markup=inline_keyboard)




def gamehelp(message, help):

    message_text = f"{help}"
    bot.send_message(message.chat.id, message_text)



def bottyt(message):
    bot.send_message(message.chat.id, '‚úÖ| –ù–∞ –º–µ—Å—Ç–µ')
    sconsole.send_console(message)


def opisanie(message):

    user_name = message.from_user.username
    description = message.text.replace('+–æ–ø–∏—Å–∞–Ω–∏–µ', '')

    with open('osebe.json', 'r') as file:
        data = json.load(file)

    if str(user_name) not in data:
        data[str(user_name)] = []

    data[str(user_name)] = description[:50]

    with open('osebe.json', 'w') as file:
        json.dump(data, file)

    bot.reply_to(message, '‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!')
    sconsole.send_console(message)


def newmemb(message, instructions, help):
    if message.chat.id == chat_id:
        for member in message.new_chat_members:
            chat = message.chat.id
            voice_path = "voice/–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.ogg"

            with open(voice_path, "rb") as voice:
                bot.send_voice(chat, voice)
            send_inst(message, instructions)
            sconsole.send_newmemb(message)
    else:
        for member in message.new_chat_members:
            chat = message.chat.id

            voice_path = "voice/–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.ogg"

            with open(voice_path, "rb") as voice:
                bot.send_voice(chat, voice)
            gamehelp(message, help)
            sconsole.send_newmemb(message)

def selectop(call):
    chat_id = call.message.chat.id

    if call.data == 'select_top: –∫—Ä—É—Ç–∫–∏':
        markup = types.InlineKeyboardMarkup(row_width=1)
        btn1 = types.InlineKeyboardButton("üå±–ö—Ä—É—Ç–∫–∏", callback_data='select_top: –∫—Ä—É—Ç–∫–∏')
        btn2 = types.InlineKeyboardButton("üçì–û—Ç–∫—Ä. –ö—Ä—É—Ç–∫–∏", callback_data='select_top: –æ—Ç–∫—Ä. –∫—Ä—É—Ç–∫–∏')
        btn3 = types.InlineKeyboardButton("‚ú®–õ–µ–≥–∏", callback_data='select_top: –ª–µ–≥–∏')
        btn4 = types.InlineKeyboardButton("üíª–ö–ª–∞–Ω—ã", callback_data='select_top: –∫–ª–∞–Ω—ã')
        markup.add(btn1, btn2, btn3, btn4)
        with open('krutki.json', 'r') as json_file:
            data = json.load(json_file)

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–±—ã–≤–∞–Ω–∏—é
        sorted_data = sorted(data.items(), key=lambda x: x[1], reverse=True)
        total_count = sum(data.values())
        result_message = "üì±| –¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ö–†–£–¢–ö–ê–ú:\n"
        top_10 = sorted_data[:10]
        for i, item in enumerate(top_10):
            result_message += f"{i + 1}. @{item[0]} ‚Äî {item[1]}\n"
        tc = str(total_count)
        result_message += f'ü•µ| –°—É–º–º–∞ –≤—Å–µ—Ö –∫—Ä—É—Ç–æ–∫ ‚Äî {tc}'
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=result_message, reply_markup=markup)
    elif call.data == 'select_top: –æ—Ç–∫—Ä. –∫—Ä—É—Ç–∫–∏':
        markup = types.InlineKeyboardMarkup(row_width=1)
        btn1 = types.InlineKeyboardButton("üå±–ö—Ä—É—Ç–∫–∏", callback_data='select_top: –∫—Ä—É—Ç–∫–∏')
        btn2 = types.InlineKeyboardButton("üçì–û—Ç–∫—Ä. –ö—Ä—É—Ç–∫–∏", callback_data='select_top: –æ—Ç–∫—Ä. –∫—Ä—É—Ç–∫–∏')
        btn3 = types.InlineKeyboardButton("‚ú®–õ–µ–≥–∏", callback_data='select_top: –ª–µ–≥–∏')
        btn4 = types.InlineKeyboardButton("üíª–ö–ª–∞–Ω—ã", callback_data='select_top: –∫–ª–∞–Ω—ã')
        markup.add(btn1, btn2, btn3, btn4)
        with open('molitvi.json', 'r') as json_file:
            moldata = json.load(json_file)
        sorted_data2 = sorted(moldata.items(), key=lambda x: x[1], reverse=True)
        total_count2 = sum(moldata.values())
        result_message = "üì±| –¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n–ø–æ –û–¢–ö–†–£–ß–ï–ù–ù–´–ú –ö–†–£–¢–ö–ê–ú:\n"
        top_10 = sorted_data2[:10]
        for i, item in enumerate(top_10):
            result_message += f"{i + 1}. @{item[0]} ‚Äî {item[1]}\n"
        tc2 = str(total_count2)
        result_message += f'ü•µ| –°—É–º–º–∞ –≤—Å–µ—Ö –æ—Ç–∫—Ä—É—á–µ–Ω–Ω—ã—Ö –∫—Ä—É—Ç–æ–∫ ‚Äî {tc2}'
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=result_message, reply_markup=markup)
    elif call.data == 'select_top: –ª–µ–≥–∏':
        markup = types.InlineKeyboardMarkup(row_width=1)
        btn1 = types.InlineKeyboardButton("üå±–ö—Ä—É—Ç–∫–∏", callback_data='select_top: –∫—Ä—É—Ç–∫–∏')
        btn2 = types.InlineKeyboardButton("üçì–û—Ç–∫—Ä. –ö—Ä—É—Ç–∫–∏", callback_data='select_top: –æ—Ç–∫—Ä. –∫—Ä—É—Ç–∫–∏')
        btn3 = types.InlineKeyboardButton("‚ú®–õ–µ–≥–∏", callback_data='select_top: –ª–µ–≥–∏')
        btn4 = types.InlineKeyboardButton("üíª–ö–ª–∞–Ω—ã", callback_data='select_top: –∫–ª–∞–Ω—ã')
        markup.add(btn1, btn2, btn3, btn4)
        with open('pers.json', 'r') as json_file:
            moldata = json.load(json_file)
        sorted_data2 = sorted(moldata.items(), key=lambda x: x[1], reverse=True)
        total_count2 = sum(moldata.values())
        result_message = "üì±| –¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n–ø–æ –õ–ï–ì–ï–ù–î–ê–†–ö–ê–ú:\n"
        top_10 = sorted_data2[:10]
        for i, item in enumerate(top_10):
            result_message += f"{i + 1}. @{item[0]} ‚Äî {item[1]}\n"
        tc2 = str(total_count2)
        result_message += f'ü•µ| –°—É–º–º–∞ –≤—Å–µ—Ö –õ–µ–≥–µ–Ω–¥–∞—Ä–æ–∫ ‚Äî {tc2}'
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=result_message, reply_markup=markup)
    elif call.data == 'select_top: –∫–ª–∞–Ω—ã':
        markup = types.InlineKeyboardMarkup(row_width=1)
        btn1 = types.InlineKeyboardButton("üå±–ö—Ä—É—Ç–∫–∏", callback_data='select_top: –∫—Ä—É—Ç–∫–∏')
        btn2 = types.InlineKeyboardButton("üçì–û—Ç–∫—Ä. –ö—Ä—É—Ç–∫–∏", callback_data='select_top: –æ—Ç–∫—Ä. –∫—Ä—É—Ç–∫–∏')
        btn3 = types.InlineKeyboardButton("‚ú®–õ–µ–≥–∏", callback_data='select_top: –ª–µ–≥–∏')
        btn4 = types.InlineKeyboardButton("üíª–ö–ª–∞–Ω—ã", callback_data='select_top: –∫–ª–∞–Ω—ã')
        markup.add(btn1, btn2, btn3, btn4)
        with open('clans.json', 'r', encoding='utf-8') as f:
            clans = json.load(f)

        if not clans:
            result_message = "üåü| –¢–æ–ø 10 –∫–ª–∞–Ω–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é:\n\n"
            result_message += "üíî –ü—É—Å—Ç–æ üíî"
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=result_message)
            return

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∞–Ω–æ–≤
        clan_list = []
        for clan_name, clan_info in clans.items():
            kazna = clan_info.get('kazna', 0)
            level = None
            if kazna < 20:
                level = 1

            if kazna >= 20:
                level = 2

            if kazna >= 40:
                level = 3

            if kazna >= 60:
                level = 4

            if kazna >= 80:
                level = 5

            if kazna >= 120:
                level = 6

            if kazna >= 200:
                level = 7

            if kazna >= 240:
                level = 8

            if kazna >= 280:
                level = 9

            if kazna >= 360:
                level = 10

            if kazna >= 420:
                level = 11

            if kazna >= 500:
                level = 12

            if kazna >= 550:
                level = 13

            if kazna >= 650:
                level = 14

            if kazna >= 720:
                level = 15

            if kazna >= 850:
                level = 16

            if kazna >= 1000:
                level = 17

            if kazna >= 1200:
                level = 18

            if kazna >= 1500:
                level = 19

            if kazna >= 2000:
                level = 20

            if level is not None:
                clan_list.append((clan_name, level))

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ —É—Ä–æ–≤–Ω—é
        sorted_clans = sorted(clan_list, key=lambda x: x[1], reverse=True)

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–ø-10 –∫–ª–∞–Ω–∞–º–∏
        result_message = "üåü| –¢–æ–ø 10 –∫–ª–∞–Ω–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é:\n\n"
        for i, (clan_name, level) in enumerate(sorted_clans[:10]):
            result_message += f"{i + 1}. {clan_name} ‚Äì {level} —É—Ä–æ–≤–µ–Ω—å\n"

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=result_message, reply_markup=markup)
    elif call.data == '—Ç–æ–≤–∞—Ä2':
        # VIP
        user_username = call.from_user.username
        shopil = user_username
        with open('VIP.json', 'r') as vipka:
            vip_data = json.load(vipka)

        if call.from_user.username in vip_data and (
                datetime.datetime.now() - datetime.datetime.strptime(str(vip_data[call.from_user.username]),
                                                                     "%Y-%m-%d %H:%M:%S")) < datetime.timedelta(days=7):
            remaining_time = datetime.timedelta(days=7) - (
                    datetime.datetime.now() - datetime.datetime.strptime(str(vip_data[call.from_user.username]),
                                                                         "%Y-%m-%d %H:%M:%S"))
            bot.answer_callback_query(call.id,
                             text=f'‚ùå| @{shopil} —É –í–∞—Å —É–∂–µ –µ—Å—Ç—å –í–∏–ø! –û—Å—Ç–∞–ª–æ—Å—å - {remaining_time}')

        else:

            user_username = call.from_user.username
            shopil = user_username
            krutki_file = 'krutki.json'
            with open(krutki_file, 'r') as file:
                krutki_data = json.load(file)
            if shopil not in krutki_data:
                krutki_data[shopil] = 0

            if krutki_data[shopil] >= 20:
                krutki_data[shopil] -= 20
                with open('krutki.json', 'w') as file:
                    json.dump(krutki_data, file)
                bot.answer_callback_query(call.id,
                                 text=f'‚úÖ| –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞! @{shopil} —Å –í–∞—à–µ–≥–æ —Å—á—ë—Ç–∞ —Å–Ω—è—Ç–æ 20 –∫—Ä—É—Ç–æ–∫!\n–í–∞—à VIP —Å—Ç–∞—Ç—É—Å —É–∂–µ –∫—Ä–∞—Å—É–µ—Ç—Å—è –≤ "–ö—Ç–æ —è"!')
                response = f"üë©üèª‚Äçü¶±| @{shopil} –∫—É–ø–∏–ª VIP —Å—Ç–∞—Ç—É—Å 7–¥–Ω–µ–π!"
                bot.send_message(chat_shop, response)

                with open('vip.json', 'r') as file:
                    vip_data = json.load(file)
                if shopil not in vip_data:
                    vip_data[shopil] = 0

                vip_data[call.from_user.username] = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

                with open('vip.json', 'w') as file:
                    json.dump(vip_data, file, indent=4)
            else:
                user_username = call.from_user.username
                shopil = user_username
                bot.answer_callback_query(call.id,
                                          text=f'‚ùå| –ü–æ–∫—É–ø–∫–∞ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–∞! @{shopil} –Ω–∞ –í–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä—É—Ç–æ–∫\n–§–∞—Ä–º–∏ = "—Ñ–µ—Ä–º–∞"')

    elif call.data == '—Ç–æ–≤–∞—Ä3':
        # VIP
        user_username = call.from_user.username
        shopil = user_username
        krutki_file = 'krutki.json'
        with open(krutki_file, 'r') as file:
            krutki_data = json.load(file)
        if shopil not in krutki_data:
            krutki_data[shopil] = 0
        if krutki_data[shopil] >= 15:
            krutki_data[shopil] -= 15
            with open('krutki.json', 'w') as file:
                json.dump(krutki_data, file)
            bot.answer_callback_query(call.id,
                             text=f'‚úÖ| –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞! @{shopil} —Å –í–∞—à–µ–≥–æ —Å—á—ë—Ç–∞ —Å–Ω—è—Ç–æ 15 –∫—Ä—É—Ç–æ–∫!\n–ë—É—Å—Ç –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π —à–∞–Ω—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 3 —á–∞—Å–∞!')
            response = f"üë©üèª‚Äçü¶±| @{shopil} –∫—É–ø–∏–ª –±—É—Å—Ç –Ω–∞ 3 —á–∞—Å–∞"
            bot.send_message(chat_shop, response)
            main = 'main'
            with open('byst.json', 'r') as file:
                vip_ddata = json.load(file)
            if main not in vip_ddata:
                vip_ddata[main] = 0
            vip_ddata[main] = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            with open('byst.json', 'w') as file:
                json.dump(vip_ddata, file, indent=4)

        else:
            user_username = call.from_user.username
            shopil = user_username
            bot.answer_callback_query(call.id,
                             text=f'‚ùå| –ü–æ–∫—É–ø–∫–∞ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–∞! @{shopil} –Ω–∞ –í–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä—É—Ç–æ–∫\n–§–∞—Ä–º–∏ = "—Ñ–µ—Ä–º–∞"')
    elif call.data == '—Ç–æ–≤–∞—Ä4':
        # VIP
        user_username = call.from_user.username
        shopil = user_username

        with open('pil.json', 'r') as file:
            pil_data = json.load(file)
        if shopil not in pil_data:
            pil_data[shopil] = 0
        if pil_data[shopil] >= 160:
            pil_data[shopil] -= 160
            with open('pil.json', 'w') as file:
                json.dump(pil_data, file)
            bot.answer_callback_query(call.id,
                             text=f'‚úÖ| –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞! @{shopil} —Å –í–∞—à–µ–≥–æ —Å—á—ë—Ç–∞ —Å–Ω—è—Ç–æ 160 –ø—ã–ª—å—Ü—ã!\n–í–∞–º –≤—ã–¥–∞–Ω–∞ 1 –∫—Ä—É—Ç–∫–∞!')
            response = f"üë©üèª‚Äçü¶±| @{shopil} –∫—É–ø–∏–ª 1 –∫—Ä—É—Ç–∫—É –∑–∞ 160 –ø—ã–ª—å—Ü—ã"
            bot.send_message(chat_shop, response)

            with open('krutki.json', 'r') as file:
                krut_data = json.load(file)
            if shopil not in krut_data:
                krut_data[shopil] = 1
            krut_data[shopil] += 1

            with open('krutki.json', 'w') as file:
                json.dump(krut_data, file, indent=4)

        else:
            user_username = call.from_user.username
            shopil = user_username
            bot.answer_callback_query(call.id,
                             text=f'‚ùå| –ü–æ–∫—É–ø–∫–∞ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–∞! @{shopil} –Ω–∞ –í–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—ã–ª—å—Ü—ã')
    elif call.data == '—Ç–æ–≤–∞—Ä5':
        # VIP
        user_username = call.from_user.username
        shopil = user_username

        with open('pil.json', 'r') as file:
            pil_data = json.load(file)
        if shopil not in pil_data:
            pil_data[shopil] = 0
        if pil_data[shopil] >= 1600:
            pil_data[shopil] -= 1600
            with open('pil.json', 'w') as file:
                json.dump(pil_data, file)
            bot.answer_callback_query(call.id,
                             text=f'‚úÖ| –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞! @{shopil} —Å –í–∞—à–µ–≥–æ —Å—á—ë—Ç–∞ —Å–Ω—è—Ç–æ 1600 –ø—ã–ª—å—Ü—ã!\n–í–∞–º –≤—ã–¥–∞–Ω–∞ 10 –∫—Ä—É—Ç–æ–∫!')
            response = f"üë©üèª‚Äçü¶±| @{shopil} –∫—É–ø–∏–ª 10 –∫—Ä—É—Ç–æ–∫ –∑–∞ 1600 –ø—ã–ª—å—Ü—ã"
            bot.send_message(chat_shop, response)

            with open('krutki.json', 'r') as file:
                krut_data = json.load(file)
            if shopil not in krut_data:
                krut_data[shopil] = 1
            krut_data[shopil] += 10

            with open('krutki.json', 'w') as file:
                json.dump(krut_data, file, indent=4)

        else:
            user_username = call.from_user.username
            shopil = user_username
            bot.answer_callback_query(call.id,
                             text=f'‚ùå| –ü–æ–∫—É–ø–∫–∞ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–∞! @{shopil} –Ω–∞ –í–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—ã–ª—å—Ü—ã')
    elif call.data == 'delete_yes':
        user = call.message.from_user.username
        with open('clans.json', 'r') as f:
            clans = json.load(f)

        for clan, members in clans.items():
            if user == members[0]:
                del clans[clan]
                with open('clans.json', 'w') as f:
                    json.dump(clans, f, indent=4)
                bot.answer_callback_query(call.id, "–ö–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                break   

        else:
            bot.answer_callback_query(call.id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–ª–∞–Ω–∞")

    elif call.data == 'delete_no':
        bot.answer_callback_query(call.id, "–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")











